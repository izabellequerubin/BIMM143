---
title: "Class 7: Machine Learning"
format: pdf
editor: visual
author: Izabelle Querubin
---

# Example of K-means clustering

First step is to make up some data with a known structure, so we know what the answer should be.

```{r}
tmp <- c(rnorm(30, mean = -3), rnorm(30, mean = 3))
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```

Now we have some structured data in `x`. Let's see if k-means is able to identify the two groups.

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

Let's explore k:

```{r}
k$size
```

```{r}
k$centers
```

```{r}
plot(x, col = k$cluster)
```

Now we can add the clusters centers:

```{r}
plot(x, col = k$cluster)
points(k$centers, col = 'blue', pch = 15)
```

```{r}
k_3 <- kmeans(x, centers = 3, nstart = 20)
plot(x, col = k_3$cluster)
```

# Example of Hierarchical Clustering

Let's use the same data as before, which we stored in `x`. We will use the `hclust()` function.

```{r}
clustering <- hclust(dist(x))
clustering
```

```{r}
plot(clustering)
```

Let's add a horizontal line:

```{r}
plot(clustering)
abline(h = 3, col = "pink")
```

To get our results (i.e. membership vector), we need to "cut" the tree. The function for doing this is `cutree()`.

```{r}
subgroups <- cutree(clustering, h = 10)
subgroups
```

Plotting this...

```{r}
plot(x, col = subgroups)
```

You can also "cut" your tree with the number of clusters you want:

```{r}
cutree(clustering, k = 2)
```

# Principal Component Analysis (PCA)

## PCA of the UK Food

First was to read the data:

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
head(x)
```

### Q1. How many rows and columns are in your new data frame named `x`? What R functions could you use to answer this question?

Rows: 17; Columns: 4

To answer this question, you could use the dim() function.

### Q2. Which approach to solving the 'row-names problem' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

Using `x <- read.csv(url, row.names=1)` is preferable and more robust since it is much simpler and more efficient.

Now we can generate some basic visualizations.

```{r}
barplot(as.matrix(x), col = rainbow(nrow(x)))
```

### Q3. Changing what optional argument in the barplot() function results in the following plot?

`beside = TRUE` ---TRUE will render the plot below, FALSE will render the plot above.

Let's refine our barplot.

```{r}
barplot(as.matrix(x), col = rainbow(nrow(x)), beside = TRUE)
```

Other visualizations that can be useful...

```{r}
pairs(x, col = rainbow(nrow(x)), pch = 16)
```

### Q5. Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

These plots are meant to compare population means and determine how significantly different they are from one another. A point that lies on the diagonal suggests that the value of that variable is similar in both populations.

### Q6. What is the main difference between N. Ireland and the other countries of the UK in terms of this data-set?

Most of the data is clustered towards the bottom left of the plot, indicating that N. Ireland consumes different amounts of the different foods compared to the other countries of the UK.

Let's apply PCA (principal components analysis). For that, we need to use the command `prcomp()`. This function expects the transpose of our data.

```{r}
#transpose_matrix <-  t(s)
# pca <- prcomp(transpose_matrix)

pca <- prcomp(t(x))
summary(pca)
```

Let's plot the PCA results!

```{r}
plot(pca)
```

We need to access the results of the PCA analysis.

```{r}
attributes(pca)
```

We can explore the pca\$x dataframe:

```{r}
pca$x
```

### Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

Plotting:

```{r}
plot(x = pca$x[, 1], y = pca$x[, 2], xlab = "PC1", ylab = "PC2", xlim = c(-270,500))
text(pca$x[, 1], pca$x[, 2], colnames(x))
```

### Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at the start of this document.

```{r}
plot(x = pca$x[, 1], y = pca$x[, 2])
colors_countries <- c('orange', 'pink', 'blue', 'green')
text(x = pca$x[, 1], y = pca$x[, 2], colnames(x), col = colors_countries)
```

```{r}
v <- round(pca$sdev^2/sum(pca$sdev^2) * 100)
v
```

```{r}
## or the second row here...
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab = "Principal Component", ylab = "Percent Variation")
```

```{r}
## Let's focus on PC1 as it accounts for > 90% of variance
par(mar=c(10, 3, 0.35, 0))
barplot(pca$rotation[,1], las = 2)
```

### Q9. Generate a similar 'loadings plot' for PC2. What two food groups feature prominently and what does PC2 mainly tell us about?

```{r}
## PC2 loadings plot
par(mar=c(10, 3, 0.35, 0))
barplot(pca$rotation[,2], las = 2)
```

The food with the largest positive loading score is mainly `Fresh_potatoes` and the food with the highest negative score is mainly `Soft_drinks`. PC2 tells us about the second principle component, which is the secondary trend or pattern that is orthogonal to PC1.

```{r}
biplot(pca)
```

# PCA of a RNA-Seq Dataset

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

### **Q10.** How many genes and samples are in this data set?

```{r}
dim(rna.data)
```

I have 100 genes and 10 samples.

Let's apply PCA:

```{r}
pca_rna = prcomp(t(rna.data), scale = TRUE)
summary(pca_rna)
```

Let's plot the principle components 1 and 2.

```{r}
plot(pca_rna$x[,1], pca_rna$x[,2], xlab = 'PC1', ylab = 'PC2')
```

```{r}
plot(pca_rna, main = "Quick scree plot")
```

```{r}
## Variance captured per PC
pca.var <- pca_rna$sdev^2

## Percent variance is often more informative to look at
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main = "Scree Plot",
        names.arg = paste0("PC", 1:10),
        xlab = "Principal Component", ylab = "Percent Variation")
```

```{r}
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca_rna$x[,1], pca_rna$x[,2], col = colvec, pch = 16,
     xlab = paste0("PC1 (", pca.var.per[1], "%)"),
     ylab = paste0("PC2 (", pca.var.per[2], "%)"))

text(pca_rna$x[,1], pca_rna$x[,2], labels = colnames(rna.data), pos = c(rep(4,5), rep(2,5)))
```

## Using ggplot

```{r}
library(ggplot2)

df <- as.data.frame(pca_rna$x)

# Our first basic plot
ggplot(df) +
  aes(PC1, PC2) +
  geom_point()
```

```{r}
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data)
df$condition <- substr(colnames(rna.data), 1, 2)

p <- ggplot(df) +
  aes(PC1, PC2, label = samples, col = condition) +
  geom_label(show.legend = FALSE)
p
```

```{r}
p + labs(title = "PCA of RNASeq Data",
         subtitle = "PC1 cleanly separates wild-tyoe from knock-out samples",
         x = paste0("PC1 (", pca.var.per[1], "%)"),
         y = paste0("PC2 (", pca.var.per[2], "%)"),
         caption = "Class example data") +
  theme_bw()
```
